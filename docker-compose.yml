services:
  postgres-user:
    image: postgres:15
    container_name: postgres-user
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - elk-network

  postgres-product:
    image: postgres:15
    container_name: postgres-product
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - elk-network

  postgres-order:
    image: postgres:15
    container_name: postgres-order
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - elk-network

  postgres-payment:
    image: postgres:15
    container_name: postgres-payment
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paymentdb"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - elk-network

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      logstash:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 120s
    networks:
      - elk-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - elk-network

  user-service:
    build: ./user-service
    container_name: user-service
    depends_on:
      - postgres-product
      - eureka-server
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/userdb
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=20000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=10
    networks:
      - elk-network

  product-service:
    build: ./product-service
    container_name: product-service
    depends_on:
      - postgres-product
      - eureka-server
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5432/productdb
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=20000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=10
    networks:
      - elk-network

  order-service:
    build: ./order-service
    container_name: order-service
    depends_on:
      - postgres-order
      - eureka-server
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/orderdb
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=20000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=10
    networks:
      - elk-network

  payment-service:
    build: ./payment-service
    container_name: payment-service
    depends_on:
      - postgres-payment
      - eureka-server
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-payment:5432/paymentdb
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=20000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=10
    networks:
      - elk-network

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - elk-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - elk-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - elk-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat
    user: root
    command: --strict.perms=false
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat_data:/usr/share/filebeat/data
    depends_on:
      - elasticsearch
      - logstash
    restart: unless-stopped
    networks:
      - elk-network

networks:
  elk-network:
    driver: bridge

volumes:
  postgres_user_data:
  postgres_product_data:
  postgres_order_data:
  postgres_payment_data:
  elasticsearch_data:
  filebeat_data: