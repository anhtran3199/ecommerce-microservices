# Common configuration for all microservices
# Redis Configuration
spring:
  data:
    redis:
      timeout: 2000ms
      port: 6379
      host: localhost
      jedis:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - java.lang.IllegalArgumentException
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1000ms
        retryExceptions:
          - java.io.IOException
  timelimiter:
    instances:
      default:
        timeoutDuration: 3s

# Management endpoints for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,retries
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    redis:
      enabled: true
    db:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  prometheus:
    metrics:
      export:
        enabled: true

# JWT Configuration
app:
  jwt:
    secret: myVerySecretKeyForJWTTokenGenerationThatShouldBeAtLeast256Bits
    expiration: 86400000