input {
  beats {
    port => 5044
  }

  tcp {
    port => 5000
    codec => json_lines
  }

  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }

  if [container][name] {
    mutate {
      add_field => { "service_name" => "%{[container][name]}" }
    }
  }

  # Parse Spring Boot logs
  if [message] =~ /^\d{4}-\d{2}-\d{2}/ {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{NUMBER:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:logger}\s*:\s+%{GREEDYDATA:log_message}"
      }
    }

    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }

    mutate {
      remove_field => [ "timestamp" ]
    }
  }

  # Add microservice identification
  if [service_name] {
    if [service_name] =~ /user-service/ {
      mutate { add_field => { "microservice" => "user-service" } }
    } else if [service_name] =~ /product-service/ {
      mutate { add_field => { "microservice" => "product-service" } }
    } else if [service_name] =~ /order-service/ {
      mutate { add_field => { "microservice" => "order-service" } }
    } else if [service_name] =~ /payment-service/ {
      mutate { add_field => { "microservice" => "payment-service" } }
    } else if [service_name] =~ /api-gateway/ {
      mutate { add_field => { "microservice" => "api-gateway" } }
    } else if [service_name] =~ /eureka-server/ {
      mutate { add_field => { "microservice" => "eureka-server" } }
    }
  }

  # Parse HTTP access logs
  if [log_message] =~ /^(\d{1,3}\.){3}\d{1,3}/ {
    grok {
      match => {
        "log_message" => "%{IPORHOST:client_ip} - - \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{URIPATH:uri}(?:%{URIPARAM:params})? HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:bytes}"
      }
    }

    mutate {
      add_field => { "log_type" => "access" }
      convert => { "response_code" => "integer" }
      convert => { "bytes" => "integer" }
    }
  } else {
    mutate {
      add_field => { "log_type" => "application" }
    }
  }

  # Add environment information
  mutate {
    add_field => { "environment" => "docker" }
    add_field => { "project" => "ecommerce-microservices" }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [ "agent", "ecs", "host", "input", "log" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "ecommerce-logs-%{+YYYY.MM.dd}"
    template_name => "ecommerce-logs"
    template => "/usr/share/logstash/templates/ecommerce-template.json"
    template_overwrite => true
  }

  stdout {
    codec => rubydebug
  }
}